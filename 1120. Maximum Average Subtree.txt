1120. Maximum Average Subtree

Given the root of a binary tree, find the maximum average value of any subtree of that tree.

(A subtree of a tree is any node of that tree plus all its descendants. The average value of a tree is the sum of its values, divided by the number of nodes.)

 

Example 1:



Input: [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
For the node with value = 6 we have an average of 6 / 1 = 6.
For the node with value = 1 we have an average of 1 / 1 = 1.
So the answer is 6 which is the maximum.
 

Note:

The number of nodes in the tree is between 1 and 5000.
Each node will have a value between 0 and 100000.
Answers will be accepted as correct if they are within 10^-5 of the correct answer.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//left subtree: letf sum, left node number, left max average

class Info{
 
public: 
    double sum;
    int number;
    double max;
    
public:
    Info(double sum, int number, double max){
        this->sum = sum;
        this->number = number;
        this->max = max;
    }
    
};

class Solution {
public:
    double maximumAverageSubtree(TreeNode* root) {
        return helper(root)->max;
    }
    
    Info* helper(TreeNode* node){
        if(node->left == nullptr && node->right == nullptr){
            new Info(node->val, 1, node->val);
        }
        
        Info* left = nullptr;
        Info* right = nullptr;
        double sum = node->val;
        int number = 1;
        
        if(node->left != nullptr){
            left = helper(node->left);
            sum += left->sum;
            number += left->number;
        }
        
        if(node->right != nullptr){
            right = helper(node->right);
            sum += right->sum;
            number += right->number;
        }
        
        double average = sum / number;
        
        if(left != nullptr){
            average = max(average, left->max);
        }
        
        if(right != nullptr){
            average = max(average, right->max);
        }
     
        return new Info(sum, number, average);
        
    }
    
};