314. Binary Tree Vertical Order Traversal

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples 1:

Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]
Examples 2:

Input: [3,9,8,4,0,1,7]

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7 

Output:

[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
Examples 3:

Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5)

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2

Output:

[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Node{
  
  public:
    int index;
    TreeNode *node;
    Node(int index, TreeNode *node){
        this->index = index;
        this->node = node;
    }
};


class Solution {
public:
    vector<vector<int>> verticalOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(root == nullptr){
            return result;
        }
        
        int cur_index = 0;
        int min_index = 0;
        int max_index = 0;
        
        Node *node = new Node(0, root);
        queue<Node*> q;
        q.push(node);
        
        map<int,vector<int>> count;
        
        while(q.size() != 0){
            int size = q.size();
            for(int i = 0; i < size; i++){
                Node *t_node = q.front();
                TreeNode *t_treeNode = t_node->node;
                cur_index = t_node->index;
                min_index = min(min_index, cur_index);
                max_index = max(max_index, cur_index);
                
                if(t_treeNode->left != nullptr){
                    Node *node = new Node(cur_index-1, t_treeNode->left);
                    q.push(node);
                }
                
                
                if(t_treeNode->right != nullptr){
                    Node *node = new Node(cur_index+1, t_treeNode->right);
                    q.push(node);
                }
                
                q.pop();
                
                count[cur_index].push_back(t_treeNode->val);
            }
        }
        
        for(auto i = min_index; i <= max_index; ++i){
            result.push_back(count[i]);
        }
        
        return result;
    }
};