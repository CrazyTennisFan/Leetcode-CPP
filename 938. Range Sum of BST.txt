Description
Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example
Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23


Solution 1:

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: the root node
     * @param L: an integer
     * @param R: an integer
     * @return: the sum
     */
    int rangeSumBST(TreeNode * root, int L, int R) {
        // write your code here.
        stack<TreeNode*> s;
        int sum = 0;
        
        while(s.size() != 0 || root != nullptr){
            while(root != nullptr){
                s.push(root);
                root = root->left;
            }
            
            TreeNode* cur_node = s.top();
            s.pop();
            
            if(cur_node->val >= L && cur_node->val <= R){
                sum += cur_node->val;
            }
            
            root = cur_node->right;
        }
        
        return sum;
    }
};


Solution 2:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        
        int sum = 0;
        helper(root, low, high, sum);        
        return sum;        
    }
    
    void helper(TreeNode* root, int low, int high, int& sum){
        if(root == nullptr){
            return;
        }
        
        if(root->val < low){
            helper(root->right, low, high, sum);
        }
        else if(root->val > high){
            helper(root->left, low, high, sum);
        }
        else{
            sum += root->val;
            helper(root->left, low, high, sum);
            helper(root->right, low, high, sum);
        }
        
    }
};