133. Clone Graph

Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.

Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.


Example
Example1

Input:
{1,2,4#2,1,4#4,1,2}
Output: 
{1,2,4#2,1,4#4,1,2}
Explanation:
1------2  
 \     |  
  \    |  
   \   |  
    \  |  
      4   

      /*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(node == nullptr){
            return node;
        }
        
        queue<Node*> q;
        set<Node*> hash;
        map<Node*, Node*> mapping;
        
        q.push(node);
        hash.insert(node);
        
        while(q.size() != 0){
            int size = q.size();
            for(int i = 0; i < size; i++){
                Node* cur_node = q.front();
                Node* clone_node = new Node(cur_node->val);
                mapping[cur_node] = clone_node;
                q.pop();
                
                for(Node* neigh: cur_node->neighbors){
                    if(hash.find(neigh) == hash.end()){
                        hash.insert(neigh);
                        q.push(neigh);
                    }
                }
            }
        }
        
        
        for (auto it=hash.begin(); it!=hash.end(); ++it){
            for(Node* neigh: (*it)->neighbors){
                mapping[(*it)]->neighbors.push_back(mapping[neigh]);
            }
        }
        
        return mapping[node];
    }
};