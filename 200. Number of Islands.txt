200. Number of Islands

Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.


class Node{
  public:    
    int x;
    int y;
    Node(int x, int y){
        this->x = x;
        this->y = y;
    }
};

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size() == 0 || grid[0].size() == 0){
            return 0;
        }
        
        int row = grid.size();
        int col = grid[0].size();
        
        
        vector<vector<bool>> visited(row, vector<bool>(col, false));
        
        int result = 0;
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(grid[i][j] == '1' && !visited[i][j]){
                    Node n(i,j);
                    visited[i][j] = true;
                    bfs(n, grid, visited, row, col);
                    ++result;
                }
            }
        }
        
        return result;
    }
    
    void bfs(Node& node, vector<vector<char>> &grid, vector<vector<bool>> &visited, int row, int col){
        
        std::queue<Node> q;
        q.push(node);
        
        while(q.size() != 0){
            int size = q.size();
            for(int i = 0; i < size; i++){
                Node n = q.front();
                int cur_x = n.x;
                int cur_y = n.y;
                
                int dx[] = {1,0,-1,0};
                int dy[] = {0,1,0,-1};
                
                for(int j = 0; j < 4; j++){
                    int next_x = cur_x + dx[j];
                    int next_y = cur_y + dy[j];
                    
                    if(next_x >= 0 && next_x < row && next_y >= 0 && next_y < col && grid[next_x][next_y] == '1' && !visited[next_x][next_y])
                    {
                        Node t_n(next_x,next_y);
                        visited[next_x][next_y] = true;
                        q.push(t_n);
                    }
                    
                }
                q.pop();
            }
        }
    }
};