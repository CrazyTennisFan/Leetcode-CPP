611. Knight Shortest Path

Description
Given a knight in a chessboard (a binary matrix with 0 as empty and 1 as barrier) with a source position, find the shortest path to a destination position, return the length of the route.
Return -1 if destination cannot be reached.

source and destination must be empty.
Knight can not enter the barrier.
Path length refers to the number of steps the knight takes.

Clarification
If the knight is at (x, y), he can get to the following positions in one step:

(x + 1, y + 2)
(x + 1, y - 2)
(x - 1, y + 2)
(x - 1, y - 2)
(x + 2, y + 1)
(x + 2, y - 1)
(x - 2, y + 1)
(x - 2, y - 1)

Example
Example 1:

Input:
[[0,0,0],
 [0,0,0],
 [0,0,0]]
source = [2, 0] destination = [2, 2] 
Output: 2
Explanation:
[2,0]->[0,1]->[2,2]
Example 2:

Input:
[[0,1,0],
 [0,0,1],
 [0,0,0]]
source = [2, 0] destination = [2, 2] 
Output:-1

/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */

class Solution {
public:
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    int shortestPath(vector<vector<bool>> &grid, Point &source, Point &destination) {
        // write your code here
        if(source.x == destination.x && source.y == destination.y){
            return 0;
        }
        
        if(grid[destination.x][destination.y] == 1){
            return -1;
        }
        
        
        int row = grid.size();
        int col = grid[0].size();
        
        
        
        vector<vector<bool>> visited(row, vector<bool>(col, false));
        visited[source.x][source.y] = true;
        queue<Point> q;
        q.push(source);
        int result = 0;
        
        // 1 1 0 0
        // 0 0 0 0
        // 0 1 1 1
        // 1 1 1 0
        
        while(q.size() != 0){
            ++result;
            int size = q.size();
            for(int i = 0; i < size; i++){
                Point point = q.front();
                int cur_x = point.x;
                int cur_y = point.y;
                
                int dx[8] = {1,1,-1,-1,2,2,-2,-2};
                int dy[8] = {2,-2,2,-2,1,-1,1,-1};
                
                for(int j = 0; j < 8; j++){
                    int next_x = cur_x + dx[j];
                    int next_y = cur_y + dy[j];
                    
                    if(next_x == destination.x && next_y == destination.y){
                        return result;
                    }
                    
                    if(next_x >= 0 && next_x < row && next_y >= 0 && next_y < col 
                        && grid[next_x][next_y] == 0 && !visited[next_x][next_y]){
                            visited[next_x][next_y] = true;
                            Point t_p(next_x,next_y);
                            q.push(t_p);
                        }
                }
                
                q.pop();
            }
        }
        
        return -1;
        
        
        
        
    }
};