207. Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5


class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
         vector<int> count(numCourses, 0);
        
        //create graph
        map<int, vector<int>> graph; 
        for(auto it: prerequisites){
            graph[it[1]].push_back(it[0]);
            count[it[0]]++;
        }
        
        queue<int> q;
        for(int i = 0; i < numCourses; i++){
            if(count[i] == 0){
                q.push(i);
            }
        }
        
        int courses = 0;
   
        while(q.size() != 0){
            courses++;
            int course = q.front();            
            q.pop();
            
            for(auto it: graph[course]){                    
                count[it]--;
                if(count[it] == 0){                        
                    q.push(it);
                }
            }                
  
        }
        
        return courses == numCourses;
    }
};