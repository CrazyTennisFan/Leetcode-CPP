207. Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5


class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
         if(prerequisites.size() == 0){
            return true;
        }

        //create graph
        map<int, vector<int>> graph; 
        std::set<int> hash;
        for(auto it: prerequisites){
            graph[it[1]].push_back(it[0]);
        }
        
        map<int, int> count;
        for(auto it: prerequisites){
            count[it[0]]++;
        }
        
        queue<int> q;
        for(auto it: prerequisites){
            if(count[it[1]] == 0 && hash.find(it[1]) == hash.end()){
                q.push(it[1]);
                hash.insert(it[1]);
            }
        }
        
        while(q.size() != 0){
            int size = q.size();           
            for(int i = 0; i < size; i++){
                int course = q.front();            
                for(auto it: graph[course]){                    
                    count[it]--;
                    if(count[it] == 0){                        
                        q.push(it);
                    }
                }                
                q.pop();
            }
        }
        
        
        for(auto it: count){
            if(it.second > 0){
                return false;
            }
        }
        
        
        return true;
    }
};