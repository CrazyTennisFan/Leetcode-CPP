183. Wood Cut

Description
Given n pieces of wood with length L[i] (integer array). Cut them into small pieces to guarantee you could have equal or more than k pieces with the same length. What is the longest length you can get from the n pieces of wood? Given L & k, return the maximum length of the small pieces.

You couldn't cut wood into float length.

If you couldn't get >= k pieces, return 0.



Example
Example 1

Input:
L = [232, 124, 456]
k = 7
Output: 114
Explanation: We can cut it into 7 pieces if any piece is 114cm long, however we can't cut it into 7 pieces if any piece is 115cm long.

Example 2

Input:
L = [1, 2, 3]
k = 7
Output: 0
Explanation: It is obvious we can't make it.
Challenge
O(n log Len), where Len is the longest length of the wood.

class Solution {
public:
    /**
     * @param L: Given n pieces of wood with length L[i]
     * @param k: An integer
     * @return: The maximum length of the small pieces
     */
    int getPieces(int v, vector<int> &L){
        int result = 0;
        
        for(int i: L){
            result += i/v;
        }
        
        return result;
    } 
     
     
    int woodCut(vector<int> &L, int k) {
        // write your code here
        if(L.size() == 0){
            return 0;
        }
        
        int right = *max_element(begin(L), end(L));
        int left = 1;
        
        while(left + 1 < right){
            int mid = left + (right-left)/2;
            if(getPieces(mid, L) < k){
                right = mid;
            }
            else{
                left = mid;
            }
        }
        
        
        if(getPieces(left, L) < k){
                return 0;
        }
        if(getPieces(right, L) < k){
                return left;
        }
            
        return right;
    }
};