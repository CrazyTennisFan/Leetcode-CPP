922. Sort Array By Parity II

Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.

Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.

You may return any answer array that satisfies this condition.

 

Example 1:

Input: [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
 

Note:

2 <= A.length <= 20000
A.length % 2 == 0
0 <= A[i] <= 1000

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        if(A.size() == 0){
            return A;
        }
        
        int l = 0;
        int r = A.size()-1;
        
        while(l < r){
            while(l < r && A[l] %2 == 0){
                ++l;
            }
            
            while(l < r && A[r] %2 == 1){
                --r;
            }
            
            if(l < r){
                auto t= A[l];
                A[l] = A[r];
                A[r] = t;
                ++l;
                --r;
            }
        }
        
        for(auto i = 1; i < A.size()/2; i = i+2)
        {
            auto t = A[i];
            A[i] = A[A.size()-1-i];
            A[A.size()-1-i] = t;
        }
        
        return A;
    }
};