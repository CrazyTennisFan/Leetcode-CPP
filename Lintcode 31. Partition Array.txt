31. Partition Array

Description
Given an array nums of integers and an int k, partition the array (i.e move the elements in "nums") such that:

All elements < k are moved to the left
All elements >= k are moved to the right
Return the partitioning index, i.e the first index i nums[i] >= k.

Example
Example 1:

Input:
[],9
Output:
0

Example 2:

Input:
[3,2,2,1],2
Output:1
Explanation:
the real array is[1,2,2,3].So return 1
Challenge
Can you partition the array in-place and in O(n)?

If all elements in nums are smaller than k, then return nums.length


class Solution {
public:
    /**
     * @param nums: The integer array you should partition
     * @param k: An integer
     * @return: The index after partition
     */
    int partitionArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0){
            return 0;
        }
        
        int left = 0;
        int right = nums.size()-1;
        
        while(left <= right){
            //if left poniter < k, then move left pointer until it meets a value >=k
            while(left <= right && nums[left] < k){
                ++left;
            }
            
            //if right poniter >= k, then move right pointer until it meets a value <k
            while(left <= right && nums[right] >= k){
                --right;
            }
            
            if(left <= right){
                int t = nums[left];
                nums[left++] = nums[right];
                nums[right--] = t;
            }
        }
        
        return left;
    }
};