973. K Closest Points to Origin

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000

struct Point{
    int x;
    int y;
    int dist;
    Point(int x, int y, int dist){
        this->x = x;
        this->y = y;
        this->dist = dist;
    }
};

struct compare{

    bool operator()(const Point& p1, const Point& p2){
        return p1.dist < p2.dist;
    }
};


class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        priority_queue<Point, vector<Point>, compare> pq;
        for(vector<int> point: points){
            int dist = point[0] * point[0] + point[1] * point[1];
            Point p(point[0], point[1], dist);
            pq.push(p);
            if(pq.size() > K){
                pq.pop();
            }
        }
        
        
        vector<vector<int>> result;
        while(pq.size() != 0){
            vector<int> t;
            Point p = pq.top();
            t.push_back(p.x);
            t.push_back(p.y);
            result.push_back(t);
            pq.pop();
        }
        
        return result;
    }
};