445. Add Two Numbers II

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
         if(l1 == nullptr){
            return l2;
        }
        
        if(l2 == nullptr){
            return l1;
        }
        
        ListNode *t = l1;
        stack<int> s1;
        while(t != nullptr){
            s1.push(t->val);
            t = t->next;
        }
        
        t = l2;
        stack<int> s2;
        while(t != nullptr){
            s2.push(t->val);
            t = t->next;
        }
        
        ListNode *dummyHead = new ListNode(0);
        int carry = 0;
        
        while(s1.size() > 0 && s2.size() > 0){
            int digit = (s1.top() + s2.top() + carry)%10;
            carry =  (s1.top() + s2.top() + carry)/10;
            s1.pop();
            s2.pop();
            ListNode *n = new ListNode(digit);
            
            n->next = dummyHead->next;
            dummyHead->next = n;
        }
        
        while(s1.size() > 0 ){
            int digit = (s1.top() + carry)%10;
            carry =  (s1.top() + carry)/10;
            s1.pop();
            ListNode *n = new ListNode(digit);
            
            n->next = dummyHead->next;
            dummyHead->next = n;
        }
        
        while(s2.size() > 0 ){
            int digit = (s2.top() + carry)%10;
            carry =  (s2.top() + carry)/10;
            s2.pop();
            ListNode *n = new ListNode(digit);
            
            n->next = dummyHead->next;
            dummyHead->next = n;
        }
        
        if(carry == 1){
            ListNode *n = new ListNode(1);
            
            n->next = dummyHead->next;
            dummyHead->next = n;
        }
        
        return dummyHead->next;
    }
};